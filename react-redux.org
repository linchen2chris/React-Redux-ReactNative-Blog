* 简介
** Redux
Redux是一款为Javascript应用程序准备的状态可预测的容器。
它可以让你写的应用程序，行为一致，可以运行在不同的环境下（客户端，服务器 和原生应用)，并且容易测试。在这些之上，它提供一种很棒的开发体验，比如[[https://github.com/gaearon/redux-devtools][实时代码编辑绑定一个时间旅行调试器。]]
你可以配合着react使用redux, 或者和其他任何view层的库，它很小，加上依赖也只有2KB，

这里有Redux的作者制作的30个免费Redux学习视频:[[https://egghead.io/series/getting-started-with-redux][Redux入门]] 

影响力：
Redux是Flux思想的一个实现版本，为了避免复杂性，它吸取了Elm的精髓，不论你是否用过这些，Redux只需要几分钟就可以入门。

安装：
npm安装就可以，略去。
#+begin_src sh
npm install -S redux
#+end_src
这里假定你使用npm（node package manager）包管理器，现代模块绑定器如webpack或browserify 去包裹CommonJS的模块。
如果你还没用npm和任何一款现代模块绑定器，而是更愿意使用单个文件，UMD构建可以使Redux作为一个全局对象，你可以从[[https://cdnjs.com/libraries/redux][csnjs]] 得到一个预编译好的版本。我们不建议用这种方式去构建正式的引用程序， 因为大部分Redux依赖的库都只在npm上可用。
** 主旨
1) 你的应用的全部 *state* 都存在一个对象树上，在全局唯一的store里。
2) 改变state树的唯一办法是发动一个 *action* （action是一个描述发生了什么的对象）
3) 为了标明 *action* 是怎么修改 *state* 树的，你需要去写纯*reducer*。
就这么多东西。

#+begin_src js
import { createStore } from 'redux'
/**
 * This is a reducer, a pure function with (state, action) => state signature.
 * It describes how an action transforms the state into the next state.
 *
 * The shape of the state is up to you: it can be a primitive, an array, an object,
 * or even an Immutable.js data structure. The only important part is that you should
 * not mutate the state object, but return a new object if the state changes.
 *
 * In this example, we use a `switch` statement and strings, but you can use a helper that
 * follows a different convention (such as function maps) if it makes sense for your
 * project.
 */
function counter(state = 0, action) {
  switch (action.type) {
  case 'INCREMENT':
    return state + 1
  case 'DECREMENT':
    return state - 1
  default:
    return state
  }
}

// Create a Redux store holding the state of your app.
// Its API is { subscribe, dispatch, getState }.
let store = createStore(counter)

// You can subscribe to the updates manually, or use bindings to your view layer.
store.subscribe(() =>
  console.log(store.getState())
)
// The only way to mutate the internal state is to dispatch an action.
// The actions can be serialized, logged or stored and later replayed.
store.dispatch({ type: 'INCREMENT' })
// 1
store.dispatch({ type: 'INCREMENT' })
// 2
store.dispatch({ type: 'DECREMENT' })
// 1

#+end_src
并非直接修改state， 你需要将你希望发生的改变写进一个普通对象即 actions。然后你写一个的函数来描述具体每一个action怎样转换整个应用程序的state，即reducer。
如果你之前用过flux， 有一个非常重要的不同点你需要小心。redux并没有Dispatcher，也不支持许多的stores，它仅有一个store和一个根reducer 函数。随着你的程序不断变大，你需要把根reducer拆分成许多小的独立的reducer 操作state树的不同部分，而不是添加stores，仿佛在react 程序中只有一个根组件，但他由许多小组件组成。
这种架构可能对于一个计数应用来说有点过量了，但这种模式的美妙之处在于应对大体量，复杂的应用。它也能开启强大的开发者工具，因为它可以跟踪每一个action的改变。你可以记录用户的session，重新运行每个action来重现过程。

* 介绍
** 动机
随着JS单页应用变得越来越复杂，我们的代码必须管理比以往任何时候都多的state。这些状态包括服务器回应，缓存数据，还有本地创建的还未被服务器永久保存的数据。UI的state也越来越复杂，比如我们需要管理激活的路径，选中的tab，是否显示spinner，是否显示分页控制等等。
管理这些不断变化的state是困难的，如果一个model可以更新另一个model，那么一个view可以更新一个model，然后这个model再去更新另一个model，被更新的model又可能会引起另一个view更新。在某一时刻，你不再明白你的app在发生什么，因为你已经失去了对state的控制。当一个系统是不透明的混沌系统，也就很难重现bug，和添加新功能。
这些还不是最坏的， 考虑一下在前端产品开发，新的需求越来越多。作为开发者，我们被期望控制所有优化更新，服务器端渲染，在路径转换前获取数据，等等。我们发现我们在试图控制一个我们从未处理过的困难，我们必然会问“是不是该放弃了”，答案是“不”。
这些复杂度很难掌控因为我们混淆了2个概念：转变和异步。我称他们是“曼妥思和可乐”（这是两种放在一起回产生剧烈反应的食品，可乐中加入曼妥思之后会瞬间产生大量气体）。这两样东西可以分别产生很棒的效果，但放在一起就会搞乱事情，React一类的库试图解决这个问题，通过在view层移除异步和直接DOM操作，然而管理你的数据的state的工作被留给了你自己。这就是Redux要替你解决的问题。
包含了Flux，CQRS和Event Sourcing的思想，Redux试图通过限制更新的发生时间和方式来让state的转变变得可预测。这些限制反应在Redux的三大原则上。
** 三大原则
Redux可以通过三个主要原则来描述
*** 单一源头的事实


    
* API
** Provider stored
<Provider>让Redux的store可以在组件层次结构里被connect调用，正常情况下，如果不在<Provider>里封装根组件，你是不能使用connect的
如果真的有必要，你可以手动传递prop到每一个被connect连接的组件里，但我们只推荐你在单元测试的时候传递store的备份。或者在非完全Reac风格的代码库里。通常你都要使用<Provider>
** Props(2个属性）
1. store （Redux Store）：单一Redux store在你的应用程序里。
2. children（react元素）：你的组件架构的根。
** 例子
Vanilla React
#+begin_src js
ReactDOM.render(
  <Provider store={store}>
    <MyRootComponent />
  </Provider>,
  rootEl
)
#+end_src
React Router 0.13
#+begin_src js
Router.run(routes, Router.HistoryLocation, (Handler, routerState) => { // note "routerState" here
  ReactDOM.render(
    <Provider store={store}>
      {/* note "routerState" here: important to pass it down */}
      <Handler routerState={routerState} />
    </Provider>,
    document.getElementById('root')
  )
})
#+end_src
React Router 1.0
#+begin_src js
ReactDOM.render(
  <Provider store={store}>
    <Router history={history}>...</Router>
  </Provider>,
  targetEl
)
#+end_src
** connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])
连接一个React组件到Redux的store上。
它没有修改传递过来的组件类。而是他返回了一个新的，被连接的组件类供你使用。
*** 参数
- [mapStateToProps(state, [ownProps]): stateProps](Function): 这个组件将订阅Redux的store更新。任何时候store更新，mapStateToProps都会被调用。他的结果必须是一个普通对象。他讲被整合到组件的props里。如果你省略这个参数，组件就不会订阅Redux的store更新。如果ownProps作为第二个参数非空，它的值就会作为props传递到你的组件里， 并且只要组件获得新的props，mapStateToProps就会被再次调用。
  + 注意：高级场景里，你需要更精细的控制渲染性能，mapStateToProps也可以返回一个函数，这个函数将会被用作特殊的组件实例，他可以让你做实例化之前的存储。你可以参考[[https://github.com/reactjs/react-redux/pull/279][#279]] 及其添加的测试用例，大部分app都不会使用这个特性。
- [mapDispatchToProps(dispatch, [ownProps]): dispatchProps](Object or Function):如果传来的是对象，它所包含的每个function都被认为是一个Redux的action创建者。一个对象带有一些函数名，但每个action 创建者都封装在dispatch调用里，所以他们可以被直接调用，被整合到组件的props里。如果传来的是一个函数，它将是给定的dispatch。这取决于你返回的对象如何使用dispatch去

